{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","runGame","setState","isRunning","runIteration","stopGame","timeoutHandler","window","clearTimeout","newBoard","makeEmptyBoard","y","rows","x","cols","neighbors","calculateNeighbors","board","cells","makeCells","setTimeout","state","interval","handleRandom","Math","random","handleClear","handleIntervalChange","event","target","value","push","getElementOffset","rect","boardRef","getBoundingClientRect","doc","document","documentElement","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","handleClick","elemOffset","offsetX","clientX","offsetY","clientY","floor","HEIGHT","WIDTH","dirs","i","length","dir","y1","x1","this","className","style","width","height","backgroundSize","onClick","ref","n","map","cell","key","onChange","React","Component","Cell","props","CELL_SIZE","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAOMA,G,uDACJ,aAAe,IAAD,8BACZ,gBAaFC,QAAU,WACR,EAAKC,SAAS,CAAEC,WAAW,IAC3B,EAAKC,gBAhBO,EAmBdC,SAAW,WACT,EAAKH,SAAS,CAAEC,WAAW,IACvB,EAAKG,iBACPC,OAAOC,aAAa,EAAKF,gBACzB,EAAKA,eAAiB,OAvBZ,EA2BdF,aAAe,WAKb,IAHA,IAAIK,EAAW,EAAKC,iBAGXC,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAE7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAAK,CAElC,IAAIE,EAAY,EAAKC,mBAAmB,EAAKC,MAAOJ,EAAGF,GAGnD,EAAKM,MAAMN,GAAGE,GAEdJ,EAASE,GAAGE,GADI,IAAdE,GAAiC,IAAdA,EAMlB,EAAKE,MAAMN,GAAGE,IAAoB,IAAdE,IACvBN,EAASE,GAAGE,IAAK,GAOzB,EAAKI,MAAQR,EAEb,EAAKP,SAAS,CAAEgB,MAAO,EAAKC,cAE5B,EAAKb,eAAiBC,OAAOa,YAAW,WACtC,EAAKhB,iBACJ,EAAKiB,MAAMC,WA5DF,EA+DdC,aAAe,WACb,IAAK,IAAIZ,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7B,EAAKI,MAAMN,GAAGE,GAAMW,KAAKC,UAAY,GAIzC,EAAKvB,SAAS,CAAEgB,MAAO,EAAKC,eAtEhB,EAyFdO,YAAc,WAEZ,EAAKT,MAAQ,EAAKP,iBAElB,EAAKR,SAAS,CAAEgB,MAAO,EAAKC,eA7FhB,EAgGdQ,qBAAuB,SAACC,GACtB,EAAK1B,SAAS,CAAEoB,SAAUM,EAAMC,OAAOC,SAjG3B,EAqGdpB,eAAiB,WAGf,IAFA,IAAIO,EAAQ,GAEHN,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAAK,CAClCM,EAAMN,GAAK,GACX,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7BI,EAAMN,GAAGE,IAAK,EAIlB,OAAOI,GA/GK,EAmHdE,UAAY,WAGV,IAFA,IAAID,EAAQ,GAEHP,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKC,KAAMD,IACzB,EAAKI,MAAMN,GAAGE,IAChBK,EAAMa,KAAK,CAAElB,IAAGF,MAKtB,OAAOO,GA9HK,EAiIdc,iBAAmB,WACjB,IAAMC,EAAO,EAAKC,SAASC,wBACrBC,EAAMC,SAASC,gBACrB,MAAO,CACLzB,EAAIoB,EAAKM,KAAOhC,OAAOiC,YAAeJ,EAAIK,WAC1C9B,EAAIsB,EAAKS,IAAMnC,OAAOoC,YAAeP,EAAIQ,YAtI/B,EA0IdC,YAAc,SAACjB,GACb,IAAMkB,EAAa,EAAKd,mBAClBe,EAAUnB,EAAMoB,QAAUF,EAAWjC,EACrCoC,EAAUrB,EAAMsB,QAAUJ,EAAWnC,EACrCE,EAAIW,KAAK2B,MAAMJ,EAnJP,IAoJRpC,EAAIa,KAAK2B,MAAMF,EApJP,IAsJVpC,GAAK,GAAKA,GAAK,EAAKC,MAAQH,GAAK,GAAKA,GAAK,EAAKC,OAClD,EAAKK,MAAMN,GAAGE,IAAM,EAAKI,MAAMN,GAAGE,IAGpC,EAAKX,SAAS,CAAEgB,MAAO,EAAKC,eAlJ5B,EAAKE,MAAQ,CACXH,MAAO,GACPI,SAAU,IACVnB,WAAW,GAGb,EAAKS,KAAOwC,GACZ,EAAKtC,KAAOuC,GACZ,EAAKpC,MAAQ,EAAKP,iBAXN,E,+DAyEKO,EAAOJ,EAAGF,GAG3B,IAFA,IAAII,EAAY,EACVuC,EAAO,CAAC,EAAE,GAAI,GAAI,EAAE,EAAG,GAAI,EAAE,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,IACvEC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAAK,CACpC,IAAME,EAAMH,EAAKC,GACbG,EAAK/C,EAAI8C,EAAI,GACbE,EAAK9C,EAAI4C,EAAI,GAEbE,GAAM,GAAKA,EAAKC,KAAK9C,MAAQ4C,GAAM,GAAKA,EAAKE,KAAKhD,MAAQK,EAAMyC,GAAIC,IACtE5C,IAIJ,OAAOA,I,+BAkEC,IAAD,OACCG,EAAU0C,KAAKvC,MAAfH,MACR,OACE,yBAAK2C,UAAU,aACb,wBAAIA,UAAU,SAAd,yBACA,yBACEA,UAAU,QACVC,MAAO,CAACC,MAnKJ,KAmKkBC,OAlKjB,IAkKiCC,eAAe,GAAD,OApK5C,GAoK4C,cApK5C,GAoK4C,OACpDC,QAASN,KAAKf,YACdsB,IAAK,SAACC,GAAQ,EAAKlC,SAAWkC,IAC7BlD,EAAMmD,KAAI,SAAAC,GAAI,OAAK,kBAAC,EAAD,CAAMzD,EAAGyD,EAAKzD,EAAGF,EAAG2D,EAAK3D,EAAG4D,IAAG,UAAKD,EAAKzD,EAAV,YAAeyD,EAAK3D,SAGzE,yBAAKkD,UAAU,YAAf,gBACe,2BAAO/B,MAAO8B,KAAKvC,MAAMC,SAAUkD,SAAUZ,KAAKjC,uBADjE,MAEGiC,KAAKvC,MAAMlB,UACR,4BAAQ0D,UAAU,SAASK,QAASN,KAAKvD,UAAzC,QACA,4BAAQwD,UAAU,SAASK,QAASN,KAAK3D,SAAzC,OAEJ,4BAAQ4D,UAAU,SAASK,QAASN,KAAKrC,cAAzC,UACA,4BAAQsC,UAAU,SAASK,QAASN,KAAKlC,aAAzC,e,GA7KS+C,IAAMC,YAoLnBC,E,uKACM,IAAD,EACUf,KAAKgB,MAAd/D,EADD,EACCA,EAAGF,EADJ,EACIA,EACX,OACE,yBAAKkD,UAAU,OAAOC,MAAO,CAACvB,KAAK,GAAD,OA5LtB,GA4LuC1B,EAAI,EAArB,MAA4B6B,IAAI,GAAD,OA5LrD,GA4LsE/B,EAAI,EAArB,MAA4BoD,MAAM,GAAD,OAAKc,GAAL,MAAwBb,OAAO,GAAD,OAAKa,GAAL,a,GAJnHJ,IAAMC,WASV1E,IC1LA8E,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BxE,OAAOyE,SAASC,UAEe,UAA7B1E,OAAOyE,SAASC,UAEhB1E,OAAOyE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASiD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e642da69.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Game.css\";\n\nconst CELL_SIZE = 20;\nconst WIDTH = 1200; \nconst HEIGHT = 700;\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cells: [],\n      interval: 100,\n      isRunning: false\n    }\n\n    this.rows = HEIGHT / CELL_SIZE;\n    this.cols = WIDTH / CELL_SIZE;\n    this.board = this.makeEmptyBoard();\n  }\n\n  runGame = () => {\n    this.setState({ isRunning: true });\n    this.runIteration();\n  }\n\n  stopGame = () => {\n    this.setState({ isRunning: false });\n    if (this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n  }\n\n  runIteration = () => {\n    // create a new board for the next gen\n    let newBoard = this.makeEmptyBoard();\n\n    // loop through y (rows)\n    for (let y = 0; y < this.rows; y++) {\n      // loop through x (cols)\n      for (let x = 0; x < this.cols; x++) {\n        // calculate how many neighbors (x, y) has\n        let neighbors = this.calculateNeighbors(this.board, x, y);\n\n        // check gol's rules\n        if (this.board[y][x]) {\n          if (neighbors === 2 || neighbors === 3) {\n            newBoard[y][x] = true;\n          } else {\n            newBoard[y][x] = false;\n          }\n        } else {\n          if (!this.board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n\n    // set the board to the new board we created earlier\n    this.board = newBoard;\n\n    this.setState({ cells: this.makeCells() });\n\n    this.timeoutHandler = window.setTimeout(() => { \n      this.runIteration();\n    }, this.state.interval);  \n  }\n\n  handleRandom = () => {\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        this.board[y][x] = (Math.random() >= 0.5);\n      }\n    }\n\n    this.setState({ cells: this.makeCells() });\n  }\n\n  calculateNeighbors(board, x, y) {\n    let neighbors = 0;\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n    for (let i = 0; i < dirs.length; i++) {\n      const dir = dirs[i];\n      let y1 = y + dir[0];\n      let x1 = x + dir[1];\n\n      if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\n        neighbors++;\n      }\n    }\n\n    return neighbors;\n  }\n\n  handleClear = () => {\n    // create empty board\n    this.board = this.makeEmptyBoard();\n    // with dead cells\n    this.setState({ cells: this.makeCells() });\n  }\n\n  handleIntervalChange = (event) => {\n    this.setState({ interval: event.target.value });\n  }\n\n  // Create an empty board (set all cells to false)\n  makeEmptyBoard = () => {\n    let board = [];\n\n    for (let y = 0; y < this.rows; y++) {\n      board[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        board[y][x] = false;\n      }\n    }\n\n    return board;  \n  }\n\n  // Create cells from this.board  \n  makeCells = () => {\n    let cells = [];\n\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.board[y][x]) {\n          cells.push({ x, y });\n        }\n      }\n    }\n\n    return cells;  \n  } \n\n  getElementOffset = () => {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n    return {\n      x: (rect.left + window.pageXOffset) - doc.clientLeft,\n      y: (rect.top + window.pageYOffset) - doc.clientTop\n    }\n  }\n\n  handleClick = (event) => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n    const x = Math.floor(offsetX / CELL_SIZE);\n    const y = Math.floor(offsetY / CELL_SIZE);\n\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\n      this.board[y][x] = !this.board[y][x];\n    }\n\n    this.setState({ cells: this.makeCells() });\n  }\n\n  render() {\n    const { cells } = this.state;\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">Conway's Game of Life</h1>\n        <div \n          className=\"Board\" \n          style={{width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}} \n          onClick={this.handleClick} \n          ref={(n) => { this.boardRef = n; }}>\n          {cells.map(cell => (<Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/> ))}\n        </div>\n\n        <div className=\"controls\">\n          Update every <input value={this.state.interval} onChange={this.handleIntervalChange} /> ms\n          {this.state.isRunning ?\n              <button className=\"button\" onClick={this.stopGame}>Stop</button> :\n              <button className=\"button\" onClick={this.runGame}>Run</button>\n          }\n          <button className=\"button\" onClick={this.handleRandom}>Random</button>\n          <button className=\"button\" onClick={this.handleClear}>Clear</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Cell extends React.Component {\n  render() {\n    const { x, y } = this.props;\n    return (\n      <div className=\"Cell\" style={{left: `${CELL_SIZE * x + 1}px`, top: `${CELL_SIZE * y + 1}px`, width: `${CELL_SIZE - 1}px`, height: `${CELL_SIZE - 1}px`}} />\n    );  \n  }\n}\n\nexport default Game;","import React from 'react';\nimport Game from \"./Game\";\nimport './Game.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}